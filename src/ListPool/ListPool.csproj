<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.1;netstandard2.0</TargetFrameworks>
    <Nullable>enable</Nullable>
    <LangVersion>preview</LangVersion>
    <Authors>Fausto David Suarez Rosario</Authors>
    <Title>ListPool</Title>
    <AssemblyName>ListPool</AssemblyName>
    <PackageId>ListPool</PackageId>
    <Description>ListPool and ValueListPool are optimized allocation free implementations of IList using ArrayPool.</Description>
    <PackageTags>ASP.NET;List;System.Buffers;ArrayPool;ListPool;Performance;Span</PackageTags>
    <RepositoryUrl>https://github.com/faustodavid/ListPool</RepositoryUrl>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageVersion>2.3.1</PackageVersion>
    <PackageReleaseNotes>
      Changelog:
      * We added support for ReadOnlySpan and Span in ListPool from constructor and extension methods
      * Optimize creation of ListPool from Array

      ListPool is the general use of the implementation, we recommend to use ListPool for most of the cases. ValueListPool is the zero heap allocations implementation, it is optimal working along stackalloc initial buffer for small lists. Note, because it is a struct it is passed by value, not by reference.
    </PackageReleaseNotes>
    <Copyright>Copyright © Fausto David Suarez Rosario 2020</Copyright>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\..\LICENSE">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Memory" Version="4.5.3" />
  </ItemGroup>

</Project>
